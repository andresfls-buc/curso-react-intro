@use "sass:math";

$particles: 100; // Number of particles
$particleSize: 6px; // Size of particles
$radius: 100px; // Radius of the ring
$lapDuration: 3s; // Duration of the animation

html,
body {
  overflow: hidden;
  background: #111;
  margin: 0; // Ensure no default margin
  height: 100%;
}

.loading-spinner {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; // Full viewport height
  width: 100vw; // Full viewport width
  position: relative; // Ensure spinner can be positioned relative to this container
}

.spinner {
  position: absolute; // Use absolute positioning for precise centering
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); // Center the spinner
  width: 120px; // Adjust the size as needed
  height: 120px; // Adjust the size as needed
  perspective: 200px;
}

i {
  display: block;
  position: absolute;
  opacity: 1;

  b {
    display: block;
    width: $particleSize;
    height: $particleSize;
    border-radius: 50%;
    background: rgba(255, 255, 255, 1);
    box-shadow: 0px 0px 14px rgba(255, 255, 255, 1);
    animation-name: spin;
    animation-duration: $lapDuration;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }
}

@for $i from 1 through $particles {
  i:nth-child(#{$i}) {
    $angle: math.div($i, $particles) * 360; // Use math.div for division
    transform: rotate(#{$angle}deg) translate3d($radius, 0, 0);

    b {
      animation-delay: $i *
        math.div($lapDuration, $particles - 2); // Use math.div for division
    }
  }
}

@keyframes spin {
  0% {
    transform: scale(1);
  }
  15% {
    transform: translate(
        math.div(-$particleSize, 2),
        math.div(-$particleSize, 2)
      )
      scale(3); // Use math.div for division
  }
  50% {
    transform: scale(1);
  }
}
